
from __future__ import print_function
import cv2
import numpy as np
import pytesseract
from PIL import Image

#from pytesseract import image_to_string

# Path of working folder on Disk
##src_path = "tes-img/"

src_path = "C:/Users/xxxxx/learning/pic/y/"
tt = src_path + "your.png"
##print (tt)

##pytesseract.setVariable("tessedit_char_whitelist","ABCDEFGHIJKLMNOPQRSTUVWXYZ")
##print(pytesseract.image_to_string(screen, config='tessedit_char_whitelist=0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZFailed to redirect !'))

def get_string(img_path):
    # Read image with opencv
    img = cv2.imread(img_path)
    ##img = cv2.resize(img, dsize=(140, 54), interpolation=cv2.INTER_CUBIC)

    # Convert to gray
    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Apply dilation and erosion to remove some noise
    kernel = np.ones((1, 1), np.uint8)
    img = cv2.dilate(img, kernel, iterations=1)
    img = cv2.erode(img, kernel, iterations=1)

    # Write image after removed noise
    cv2.imwrite(src_path + "removed_noise.png", img)

    #  Apply threshold to get image with only black and white
    #img = cv2.adaptiveThreshold(img, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 31, 2)

    # Write the image after apply opencv to do some ...
    cv2.imwrite(src_path + "thres.png", img)

    # Recognize text with tesseract for python
    result = pytesseract.image_to_string(Image.open(src_path + "thres.png"), lang='eng', \
        config='--psm 10 --oem 3 -c tessedit_char_whitelist=0123456789')


    # Remove template file
    #os.remove(temp)
    #print(result)
    #result = result.encode('ascii')
    #print("1",result)
    i = "Series ber tind"
    #print (i)
    if ( result == i):
        #print ("Failed to redirect !")
        tt = "Failed to redirect !"
    else :
        #print ("Not Match")
        tt ="succesful"
        
    #return result
    return tt

print('--- Start recognize text from image ---')
print(get_string(src_path + "your.png") )

print("------ Done -------")
